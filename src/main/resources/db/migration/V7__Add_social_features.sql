-- User follows table already exists, just add missing constraints if needed
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'unique_follow') THEN
        ALTER TABLE user_follows ADD CONSTRAINT unique_follow UNIQUE (follower_id, following_id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'no_self_follow') THEN
        ALTER TABLE user_follows ADD CONSTRAINT no_self_follow CHECK (follower_id != following_id);
    END IF;
END $$;

-- Add indexes if they don't exist
CREATE INDEX IF NOT EXISTS idx_user_follows_follower ON user_follows(follower_id);
CREATE INDEX IF NOT EXISTS idx_user_follows_following ON user_follows(following_id);
CREATE INDEX IF NOT EXISTS idx_user_follows_created_at ON user_follows(created_at);

-- User activity feed table
CREATE TABLE IF NOT EXISTS user_activity (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    activity_type VARCHAR(50) NOT NULL, -- 'playlist_created', 'song_liked', 'follow_user', 'playlist_shared', etc.
    entity_type VARCHAR(50) NOT NULL, -- 'song', 'playlist', 'user', 'album', 'artist'
    entity_id BIGINT NOT NULL,
    metadata JSONB, -- Additional activity-specific data
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_activity_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Indexes for activity feed
CREATE INDEX idx_user_activity_user ON user_activity(user_id);
CREATE INDEX idx_user_activity_created_at ON user_activity(created_at DESC);
CREATE INDEX idx_user_activity_type ON user_activity(activity_type);

-- Collaborative playlists - add columns to existing playlists table
ALTER TABLE playlists 
ADD COLUMN IF NOT EXISTS is_collaborative BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS collaborative_token VARCHAR(255) UNIQUE;

-- Playlist collaborators table
CREATE TABLE IF NOT EXISTS playlist_collaborators (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    playlist_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    role VARCHAR(20) NOT NULL DEFAULT 'contributor', -- 'owner', 'admin', 'contributor'
    can_add_songs BOOLEAN DEFAULT TRUE,
    can_remove_songs BOOLEAN DEFAULT TRUE,
    can_invite_others BOOLEAN DEFAULT FALSE,
    joined_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_collab_playlist FOREIGN KEY (playlist_id) REFERENCES playlists(id) ON DELETE CASCADE,
    CONSTRAINT fk_collab_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT unique_playlist_collaborator UNIQUE (playlist_id, user_id)
);

CREATE INDEX idx_playlist_collaborators_playlist ON playlist_collaborators(playlist_id);
CREATE INDEX idx_playlist_collaborators_user ON playlist_collaborators(user_id);

-- Skip podcast tables as they already exist with different column names
-- The existing tables use show_id instead of podcast_id

-- Daily mix/discover weekly playlists metadata
CREATE TABLE IF NOT EXISTS generated_playlists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    playlist_id BIGINT NOT NULL,
    playlist_type VARCHAR(50) NOT NULL, -- 'daily_mix', 'discover_weekly', 'release_radar', 'radio'
    generation_date DATE NOT NULL,
    algorithm_version VARCHAR(20),
    metadata JSONB, -- Store algorithm parameters, seed data, etc.
    CONSTRAINT fk_gen_playlist_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_gen_playlist_playlist FOREIGN KEY (playlist_id) REFERENCES playlists(id) ON DELETE CASCADE,
    CONSTRAINT unique_generated_playlist UNIQUE (user_id, playlist_type, generation_date)
);

CREATE INDEX idx_generated_playlists_user ON generated_playlists(user_id);
CREATE INDEX idx_generated_playlists_type ON generated_playlists(playlist_type);
CREATE INDEX idx_generated_playlists_date ON generated_playlists(generation_date DESC);