name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: musify_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Create test environment file
      run: |
        cat > .env << EOF
        DATABASE_HOST=localhost
        DATABASE_PORT=5432
        DATABASE_NAME=musify_test
        DATABASE_USER=postgres
        DATABASE_PASSWORD=postgres
        JWT_SECRET=test-secret-key-for-ci
        JWT_EXPIRY=3600000
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_ENABLED=true
        APP_ENV=test
        APP_PORT=8080
        APP_BASE_URL=http://localhost:8080
        EOF
        
    - name: Run database migrations
      run: ./gradlew flywayMigrate
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/musify_test
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        
    - name: Run tests
      run: ./gradlew test --info
      
    - name: Generate test report
      run: ./gradlew jacocoTestReport
      if: success() || failure()
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: success() || failure()
      with:
        name: test-results
        path: build/reports/tests/test/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        
  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
        
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Build Docker image
      run: docker build -t musify-backend:${{ github.sha }} .
      
    - name: Save Docker image
      run: docker save musify-backend:${{ github.sha }} > musify-backend.tar
      
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: musify-backend.tar
        retention-days: 1
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
        
    - name: Run Ktlint
      run: ./gradlew ktlintCheck
      continue-on-error: true
      
    - name: Upload Ktlint report
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ktlint-report
        path: build/reports/ktlint/